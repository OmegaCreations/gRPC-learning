syntax = "proto3";

// ====================================
//               ENUMS
// ====================================
enum ApprovalStatus {
    APPROVED = 1;
    CERTIFICATE_INVALID = 2;
    CLIENT_NOT_AVAIBLE = 3;
}

// ====================================
//              MESSAGES
// ====================================
// Simulates an empty message because protobuffer doesn't support void
message EmptyMessage {}


// Basic communication
message PublicKey {
    string public_key = 1;
}

message ConnectionRequest {
    string encrypted_certificate = 1;
    string request_type = 2;
    string TTL = 3;
    string adress = 4; // no need for encryption because of traffic sniffing will show destination anyway
}

message ConnectionApproval {
    optional ApprovalStatus approval_status = 1;
    optional string encrypted_jwt_token = 2;
}

// ====================================
//    Communication between clients
// ====================================
message DataWrapper { // can we make it for response also to authenticate client B response??
    string content_type = 1;
    string jwt_token = 2;
    bytes payload = 5;
}

message DataWrapperResponse {
    optional string content_type = 1;
    optional bytes payload = 2;
}

// ====================================
//              Services
// ====================================
service CentralSystem {
    rpc getPublicKey(EmptyMessage) returns (PublicKey) {}
    rpc requestConnection(ConnectionRequest) returns (ConnectionApproval) {}
}

// Implementation of Client's Listener. 
// Allows CentralSystem or other Wrapper to request data.
service ClientService {
    // central system <-> client
    rpc sendConnectionData(ConnectionApproval) returns(EmptyMessage) {}

    // client <-> client
    rpc sendPayload(DataWrapper) returns (DataWrapperResponse) {}
}